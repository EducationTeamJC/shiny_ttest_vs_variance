breaks = c("A", "B"),
values = c("red", "blue")
)
afcou_colors <- scale_color_manual(
breaks = c("Germany", "United Kingdom", "Denmark", "Poland", "Spain", "Italy"),
values = c("red", "orange", "green", "lightblue", "darkblue", "purple")
)
# Generate and save KM plots
km_plot_per_part <- create_km_plot(km_data, group_var = "ENPART", title = "Kaplan-Meier Curve by Part", manual_color = part_colors)
ggsave(file.path(figures_out, "Figure 8.4.16 Kaplan-Meier Curve for Retention by treatment group: Part A and Part B (ITT for KPI).png"), plot = km_plot_per_part)
km_plot_part_a <- create_km_plot(km_data, group_var = "AFCOU", enpart_filter = "A", title = "Kaplan-Meier Curve by Country, Part A", manual_color = afcou_colors)
ggsave(file.path(figures_out, "Figure 8.4.17 Kaplan-Meier Curve for Retention for Part A by country (ITT for KPI).png"), plot = km_plot_part_a)
km_plot_part_b <- create_km_plot(km_data, group_var = "AFCOU", enpart_filter = "B", title = "Kaplan-Meier Curve by Country, Part B", manual_color = afcou_colors)
ggsave(file.path(figures_out, "Figure 8.4.18 Kaplan-Meier Curve for Retention for Part B by country (ITT for KPI).png"), plot = km_plot_part_b)
# Prepare site and participant postal codes for distance calculation
site_info$site_postal_code <- site_info$Zip.postal.code
distance_df <- data.frame(
SUBJID = joined_data$SUBJID,
Site.nr = joined_data$SITEID,
participant_postal_code = ifelse(joined_data$DQPOSTAL == "³2", 32, joined_data$DQPOSTAL),
country = joined_data$AFCOU
)
distance_df <- left_join(distance_df, site_info[, c("Site.nr", "site_postal_code")], by = "Site.nr")
distance_df <- apply(distance_df, 2, function(x) ifelse(x == "", NA, x))
distance_df <- data.frame(distance_df)
distance_df$participant_postal_code <- toupper(distance_df$participant_postal_code)
distance_df$participant_postal_code_edited <- distance_df$participant_postal_code
# Map Polish postal codes to cities for participants from Poland
postcode_mapping_PL <- c(
"01" = "Warszawa", "02" = "Warszawa", "03" = "Warszawa", "30" = "Kraków", "31" = "Kraków", "32" = "Wieliczka", "33" = "Tarnów", "40" = "Katowice", "50" = "Wrocław", "51" = "Wrocław", "52" = "Wrocław", "53" = "Wrocław", "54" = "Wrocław", "55" = "Oława", "56" = "Oleśnica", "78" = "Koszalin", "91" = "Łódź", "93" = "Łódź", "95" = "Zgierz"
)
x <- distance_df[distance_df$country == "Poland", ]$participant_postal_code
distance_df[distance_df$country == "Poland", ]$participant_postal_code_edited <-
ifelse(x %in% names(postcode_mapping_PL), postcode_mapping_PL[x], x)
# Map UK postal codes to cities for participants from the UK
postcode_mapping_UK <- c(
"EX2" = "Exeter", "KT12" = "Walton-on-Thames", "LE8" = "Leicester", "M25" = "Manchester", "BB10" = "Burnley", "BB3" = "Darwen", "BB5" = "Accrington", "BB12" = "Burnley", "BB4" = "Rossendale", "BB11" = "Burnley", "CH63" = "Wirral", "WV11" = "Wolverhampton", "B31" = "Birmingham", "B17" = "Birmingham", "B23" = "Birmingham", "B24" = "Birmingham", "B73" = "Sutton Coldfield", "FY8" = "Lytham St Annes", "FY5" = "Thornton-Cleveleys", "FY4" = "Blackpool", "NE21" = "Blaydon-on-Tyne", "DH3" = "Chester-le-Street", "NE3" = "Newcastle upon Tyne", "NE40" = "Ryton", "RG18" = "Thatcham"
)
x <- distance_df[distance_df$country == "United Kingdom", ]$participant_postal_code
distance_df[distance_df$country == "United Kingdom", ]$participant_postal_code_edited <-
ifelse(x %in% names(postcode_mapping_UK), postcode_mapping_UK[x], x)
# Function to calculate driving distance between participant and site
get_distance <- function(participant_postal_code, site_postal_code, country) {
if (any(is.na(c(participant_postal_code, site_postal_code, country)))) {
return(NA)
}
participant_address <- paste(participant_postal_code, country, sep = ", ")
site_address <- paste(site_postal_code, country, sep = ", ")
addresses <- data.frame(address = c(participant_address, site_address), stringsAsFactors = FALSE)
geocoded <- geocode(addresses, address = address, method = "osm", lat = latitude, long = longitude, verbose = FALSE, quiet = TRUE)
src <- unlist(geocoded[1, c(3, 2)])
dst <- unlist(geocoded[2, c(3, 2)])
route <- tryCatch({
osrmRoute(src = src, dst = dst, overview = "full")
}, error = function(e) NA)
if (!is.list(route) || is.null(route$distance)) return(route)
route$distance
}
# library(future.apply)
#
# plan(multisession)
# # Parallelize using future_mapply:
# distance_df$distance_km <- future_mapply(
#   FUN = get_distance,
#   participant_postal_code = distance_df$participant_postal_code,
#   site_postal_code = distance_df$site_postal_code,
#   country = distance_df$country,
#   SIMPLIFY = TRUE
# )
#
# distance_df$distance_km_2 <- future_mapply(
#   FUN = get_distance,
#   participant_postal_code = distance_df$participant_postal_code_edited,
#   site_postal_code = distance_df$site_postal_code,
#   country = distance_df$country,
#   SIMPLIFY = TRUE
# )
#
# write.csv(distance_df, "data/distance_df.csv")
# Read precomputed distances (or calculate as needed)
distance_df <- read.csv("data/distance_df.csv", row.names = 1)
distance_df$SUBJID <- as.numeric(distance_df$SUBJID)
# Manually set distances for cases not handled by the mapping tool
distance_df$distance_km_2[distance_df$SUBJID == "724150005"] <- 71.2
distance_df$distance_km_2[distance_df$SUBJID == "724150006"] <- 33.0
distance_df$distance_km_2[distance_df$SUBJID == "724150001"] <- 56.2
distance_df$distance_km_2[distance_df$SUBJID == "826130006"] <- 10.9
distance_df$distance_km_2[distance_df$SUBJID == "826060008"] <- 9.2
distance_df$distance_km_2[distance_df$SUBJID == "724120003"] <- NA
distance_df$distance_km_2[distance_df$SUBJID == "380020007"] <- NA
table1_diversity <- function(dat, country, caption) {
# Clean and harmonize country of birth and parents
dat <- dat %>%
mutate(across(c(DQCOUNTRYBIRTH, DQCOUNRTYPARENT1, DQCOUNRTYPARENT2), ~ {
.x <- str_trim(.x)
case_when(
.x == "" | str_detect(.x, "^\\d{1,2}[\\.\\-/]\\d{1,2}[\\.\\-/]\\d{2,4}$") ~ NA_character_,
.x %in% c("Danmark", "Danmark ") ~ "Denmark",
.x %in% c("DDR", "Deutschland", "Deutschland ", "D", "halle-saale", "gestorben", "hettstedt") ~ "Germany",
.x %in% c("Italia", "Cersosimo", "Laterza ta", "Laterza  ta", "Laterza  tanto", "Laterza  Ta", "Borgia", "Amantea", "Sambiase", "Cropani", "Crotonei", "Nicastro", "Messina", "Catanzaro", "Benevento") ~ "Italy",
.x %in% c("España", "España ", "ESPAÑA", "españa", "Barcelona", "Córdoba") ~ "Spain",
.x %in% c("England", "Great Britain", "United kingdom", "UK", "Uk", "Britain", "United Kingdom ", "Northern Ireland", "Scotland", "Wales") ~ "United Kingdom",
.x %in% c("Polska", "POLSKA", "Poland", "Czechy", "Polsks") ~ "Poland",
.x %in% c("Österreich") ~ "Austria",
.x == "Israele" ~ "Israel",
.x == "Tschechien" ~ "Czech Republic",
.x == "Boston" ~ "USA",
is.na(.x) ~ "Missing",
TRUE ~ .x
)
}))
# Harmonize ethnic specifications
dat <- dat %>%
mutate(DQETHNIC_SPEC = case_when(
str_trim(DQETHNIC_SPEC) %in% c("", "Ved ikke", "Weiß nicht", "Weiß ich nicht", "Weiß", "Don't know", "Nie wiem", "Non so", "no se", "No se") ~ "Unknown by patient",
str_trim(DQETHNIC_SPEC) %in% "Per Mail durch die Studieneinrichtung" ~ NA_character_,
str_trim(DQETHNIC_SPEC) %in% c("Dansk", "Dansk ") ~ "Danish",
str_trim(DQETHNIC_SPEC) %in% c("Deutsch", " Deutsch", "deutsch") ~ "German",
str_trim(DQETHNIC_SPEC) %in% c("Italiano", "Italiano ") ~ "Italian",
str_trim(DQETHNIC_SPEC) %in% c("Polska", "Polska ", "polska") ~ "Polish",
str_trim(DQETHNIC_SPEC) %in% c("Español", "Español ", "ESPAÑOL") ~ "Spanish",
str_trim(DQETHNIC_SPEC) %in% c("Gallego", "Galega") ~ "Galician",
str_trim(DQETHNIC_SPEC) %in% c("English", "English ", '"English "', "White British", "British") ~ "British",
str_trim(DQETHNIC_SPEC) %in% c("Blanco") ~ "White",
str_trim(DQETHNIC_SPEC) %in% c("Prefiero no decirlo", "Prefero no dirlo", "Prefer not to say", "Wolę nie podawać") ~ "Prefer not to answer",
is.na(DQETHNIC_SPEC) ~ "Missing",
TRUE ~ str_trim(DQETHNIC_SPEC)
))
# Add continent
continent_map <- c(
"Denmark" = "Europe", "Germany" = "Europe", "Italy" = "Europe", "Israel" = "Asia", "USA" = "North America", "Poland" = "Europe", "Spain" = "Europe", "Ecuador" = "South America", "United Kingdom" = "Europe", "Pakistan" = "Asia"
)
dat$Continent <- factor(continent_map[dat$DQCOUNTRYBIRTH])
# Assign factors and recode
dat$country_trial_same <- factor(ifelse(dat$DQCOUNTRYBIRTH == dat$AFCOU, "Yes", "No"), levels = c("Yes", "No"))
dat$DMSEX <- factor(dat$DMSEX, levels = c(3, 2, 1), labels = c("Male", "Female", "Other"))
dat$DQLIVE <- factor(dat$DQLIVE, levels = c(2, 1), labels = c("Urban", "Rural"))
dat$distance_from_site <- round(dat$distance_km_2, 2)
dat$DQCOUNTRYBIRTH <- factor(dat$DQCOUNTRYBIRTH)
dat$DQCOUNRTYPARENT1 <- factor(dat$DQCOUNRTYPARENT1)
dat$DQCOUNRTYPARENT2 <- factor(dat$DQCOUNRTYPARENT2)
dat$DQETHNIC_SPEC <- factor(dat$DQETHNIC_SPEC)
dat$SQJOB <- dat$SQJOB_ENG
dat$DQPARTICIPATION <- factor(dat$DQPARTICIPATION, levels = c(1, 0), labels = c("Yes", "No"))
dat$MQTRANSPORTSITE <- factor(dat$MQTRANSPORTSITE, levels = c(3, 2, 1), labels = c("Walking/cycling", "Car", "Public transport"))
dat$MQCAR <- factor(dat$MQCAR, levels = c(3, 2, 1), labels = c("Yes", "No", "No, but I have access to car when needed"))
dat$MQTRANSPORTSPEC <- factor(dat$MQTRANSPORTSPEC, levels = c(3, 2, 1), labels = c("Walking/cycling", "Car", "Public transport"))
dat$MQASSIST <- factor(dat$MQASSIST, levels = c(3, 2, 1), labels = c("Yes", "No", "Rather not say"))
dat$SQMARITAL <- factor(dat$SQMARITAL, levels = c(6, 5, 4, 3, 2, 1), labels = c("Partner", "Partner and (your/their) parent(s)", "Parent(s)", "Alone", "Other relatives or friends", "Residence, living in accommodation provided with your job, etc"))
dat$SQEDUCATION <- factor(dat$SQEDUCATION, levels = c(5, 4, 3, 2, 1), labels = c("No education or primary education", "Lower secondary education", "Higher secondary education", "Tertiary education (bachelor's degree or higher)", "Rather not say"))
dat$SQSITUATION <- factor(dat$SQSITUATION, levels = c(11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1), labels = c("In paid work", "Self-employed", "Helping in the family business (unpaid)", "Unemployed", "A pupil, student, in training", "Not working due to illness or disability", "Fulfilling domestic tasks and care responsibilities", "In retirement", "Military service or other community service", "Other", "Rather not say"))
dat$SQEMPLOYMENTFTE <- factor(dat$SQEMPLOYMENTFTE, levels = c(4, 3, 2, 1), labels = c("Full-time", "Part-time", "Occasionally", "Rather not say"))
dat$SQINCOME <- factor(dat$SQINCOME, levels = c(6, 5, 4, 3, 2, 1), labels = c("Quintile 1", "Quintile 2", "Quintile 3", "Quintile 4", "Quintile 5", "Rather not say"))
# SQJOB harmonization
dat <- dat %>% mutate(SQJOB = case_when(is.na(SQJOB) | SQJOB == "" ~ "Missing", TRUE ~ str_trim(SQJOB)))
dat <- dat %>% mutate(SQJOB = trimws(tolower(SQJOB))) %>% mutate(SQJOB = case_when(
SQJOB %in% c("manager", "corporate benefits consultant") ~ "Manager",
SQJOB %in% c("legal counsel", "attorney", "social worker", "architectural technician", "senior marine claims adjuster", "auctioneer and valuer") ~ "Professional",
SQJOB %in% c("admin", "administrator", "office", "address") ~ "Clerical Support Worker",
SQJOB %in% c("bus driver city traffic", "security guard", "carer", "social care", "food handler", "cleaning", "sanitary") ~ "Service and Sales Worker",
SQJOB %in% c("car electrician", "fabrication") ~ "Craft and Related Trades Worker",
SQJOB %in% c("work in logistics", "testing") ~ "Plant and Machine Operators and Assembler",
SQJOB == "white collar" ~ "Professional",
SQJOB == "duty" ~ "Ambigious",
TRUE ~ "Missing"
))
# Race label
dat <- dat %>% mutate(LBL_DQRACE = case_when(
DQRACE1 == "true" ~ "Asian",
DQRACE2 == "true" ~ "Black",
DQRACE3 == "true" ~ "Native American (North and South)",
DQRACE4 == "true" ~ "Pacific Islander or Native Hawaiian",
DQRACE5 == "true" ~ "White",
DQRACE6 == "true" ~ "Other",
DQRACE7 == "true" ~ "Rather not say",
TRUE ~ "Missing"
))
# Set variable labels (for table1)
label(dat$DMAGE) <- "Age (Years)"
label(dat$DMSEX) <- "Sex"
label(dat$DQLIVE) <- "Living area"
label(dat$distance_from_site) <- "Distance from site (KM)"
label(dat$DQCOUNTRYBIRTH) <- "Birth country"
label(dat$DQCOUNRTYPARENT1) <- "Birth country parent 1"
label(dat$DQCOUNRTYPARENT2) <- "Birth country parent 2"
label(dat$country_trial_same) <- "Country of birth equals country of trial"
label(dat$Continent) <- "Continent of birth"
label(dat$DQETHNIC_SPEC) <- "Ethnicity"
label(dat$LBL_DQRACE) <- "Which origin describes you best?"
label(dat$DQPARTICIPATION) <- "Previous participation in a clinical trial"
label(dat$MQTRANSPORTSITE) <- "Transport to research site"
label(dat$MQCAR) <- "Car owner"
label(dat$MQSPEC) <- "Time to diabetes specialist (minutes)"
label(dat$MQTRANSPORTSPEC) <- "Mode of transportation to diabetes specialist"
label(dat$MQASSIST) <- "Assistance to see specialist needed"
label(dat$SQMARITAL) <- "Living with? (Children not included)"
label(dat$SQHOUSEHOLD) <- "Number of people in household"
label(dat$SQEDUCATION) <- "Highest education"
label(dat$SQSITUATION) <- "Working life"
label(dat$SQEMPLOYMENTFTE) <- "Employment type"
label(dat$SQJOB) <- "Job field (ISCO-08)"
label(dat$SQINCOME) <- "Income"
# Build the table1 formula
t1_vars <- c(
"DMAGE", "DMSEX", "DQLIVE", "distance_from_site", "DQCOUNTRYBIRTH", "DQCOUNRTYPARENT1", "DQCOUNRTYPARENT2", "country_trial_same", "Continent",
"DQETHNIC_SPEC", "LBL_DQRACE", "DQPARTICIPATION", "MQTRANSPORTSITE", "MQCAR", "MQSPEC", "MQASSIST", "SQMARITAL",
"SQHOUSEHOLD", "SQEDUCATION", "SQSITUATION", "SQEMPLOYMENTFTE", "SQJOB", "SQINCOME"
)
table1_formula <- as.formula(paste("~", paste(t1_vars, collapse = " + "), "| ENPART"))
# Force NA to Missing if factor column
dat <- dat %>% mutate(across(where(is.factor), ~ fct_explicit_na(.x, na_level = "Missing")))
# Create the table
out <- table1(
table1_formula,
data = dat,
overall = c(right = "Total"),
caption = caption,
render.categorical = my.render.cat
)
return(out)
}
dat <- joined_data %>%
filter(FILTER_ITT == 1)
# Ensure SITEID is available for joining
distance_df$SITEID <- distance_df$Site.nr
# Join distance information
dat <- left_join(dat, distance_df)
# Generate and save the diversity table (split by part)
ft <- t1flex(table1_diversity(dat, country = FALSE, caption = "Diversity aspects split by part")) %>%
FitFlextableToPage()
default_save_ft(ft, "Table 8.4.19 Diversity aspects split by part A and B (ITT for KPI)")
ft
variables_box <- list(c("DMAGE", "Age (Years)", "Figure 8.4.20 Boxplot for Age split by Part (ITT for KPI).png"),
c("distance_from_site","Distance from site (KM)", "Figure 8.4.21 Boxplot for Distance from Site split by Part (ITT for KPI).png"),
c("MQSPEC","Time to diabetes specialist (minutes)", "Figure 8.4.22 Boxplot for Time to diabetes specialist split by Part (ITT for KPI).png"),
c("SQHOUSEHOLD","Number of people in household", "Figure 8.4.23 Boxplot for Number of people in household split by Part (ITT for KPI).png")
)
# Loop through and plot each
dat$distance_from_site <- round(dat$distance_km_2, 2)
for (i in 1:length(variables_box)) {
v <- variables_box[[i]]
var <- v[1]
title <- v[2]
file <- v[3]
p <- ggplot(dat, aes_string(x = "ENPART", y = var, fill = "ENPART")) +
geom_boxplot(color = "black", outlier.shape = NA) +
#scale_fill_manual(values = c("#2196F3", "#4CAF50", "#FFC107", "#E91E63")) +
labs(
x = "Part",
y = title,
title = paste("Boxplot of:", title, "- split by Part")
) +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
# Use jitterdodge when split by 'type' (mapped to fill)
p <- p + geom_jitter(shape = 21, # Color points by type to match fill aesthetic
position = position_jitterdodge(
jitter.width = 0.05,  # How much jitter within each dodged group
#dodge.width = 0.75, # How far apart groups are dodged (match boxplot)
seed = 123 # for reproducibility
),
size = 2.5,   # Adjust point size
alpha = 0.7) # Adjust point transparency
ggsave(file.path(figures_out, file), plot = p)
print(p)
}
# Load patient satisfaction data
SP <- readr::read_csv(file.path(data_dir, "wideSP.csv"))
# Prepare satisfaction data: merge with arm/country, filter ITT, and get first non-missing per subject
satisfaction <- SP %>%
select(SUBJID, SPSECA1, SPSECB1, SPSECC1) %>%
left_join(joined_data %>% select(SUBJID, ENARM, AFCOU, FILTER_ITT), by = "SUBJID") %>%
filter(FILTER_ITT == 1) %>%
group_by(SUBJID, ENARM, AFCOU) %>%
summarise(
SPSECA1 = first(na.omit(SPSECA1)),
SPSECB1 = first(na.omit(SPSECB1)),
SPSECC1 = first(na.omit(SPSECC1)),
.groups = "drop"
) %>%
mutate(
ENARM = factor(ENARM, levels = c("C", "H", "R"), labels = c("Conventional", "Hybrid", "Remote")),
SPSECA1 = factor(replace_na(SPSECA1, 5), levels = 0:5, labels = c("Strongly disagree", "Disagree", "Neutral", "Agree", "Strongly agree", "Missing")),
SPSECB1 = factor(replace_na(SPSECB1, 5), levels = 0:5, labels = c("Strongly disagree", "Disagree", "Neutral", "Agree", "Strongly agree", "Missing")),
SPSECC1 = factor(replace_na(SPSECC1, 5), levels = 0:5, labels = c("Strongly disagree", "Disagree", "Neutral", "Agree", "Strongly agree", "Missing"))
)
# Set variable labels for table1
label(satisfaction$SPSECA1) <- "Visit V2 (baseline)"
label(satisfaction$SPSECB1) <- "Visit V6"
label(satisfaction$SPSECC1) <- "Visit V9 (EOT)"
table1_formula <- as.formula("~ SPSECA1 + SPSECB1 + SPSECC1 | ENARM")
# Create and save the table
out <- table1(
table1_formula,
data = satisfaction,
overall = c(right = "Total"),
render.categorical = my.render.cat,
caption = "Patient survey answers to: 'Overall, I am satisfied with my trial experience so far'"
)
ft <- t1flex(out) %>% autofit()
default_save_ft(ft, "Table 8.4.24 Patient satisfaction survey results (ITT for KPI)")
ft
# Load site staff survey data
siteStaff <- read_csv("data/Final RADIAL datasets/20241021-long.csv")
siteStaffPart <- read_csv("data/Final RADIAL datasets/20241021-users.csv") %>%
rename(SITEID = Site.code, SUBJID = ID)
# Determine staff role (1 = Investigator, 2 = Coordinator)
role <- siteStaff %>%
group_by(SUBJID) %>%
filter(ITEM %in% c("SSROLETIME1", "SSROLETIME2", "SSROLETIME3", "SSROLETIME4")) %>%
summarise(
SSROLETIME = case_when(
any(VALUE == 1, na.rm = TRUE) ~ 1,
any(VALUE == 2, na.rm = TRUE) ~ 2,
TRUE ~ NA_real_
),
.groups = "drop"
)
# Prepare and clean site staff satisfaction data
siteStaff <- siteStaff %>%
filter(ITEM %in% c("SSSATTIME1", "SSSATTIME2", "SSSATTIME3", "SSSATTIME4")) %>%
mutate(
VALUE = as.character(VALUE),
VALUE = replace_na(VALUE, "Missing"),
VALUE = factor(VALUE, levels = c(0:4, "Missing"),
labels = c("Strongly disagree", "Disagree", "Neutral", "Agree", "Strongly agree", "Missing"))
) %>%
left_join(joined_data %>% select(SITEID, ENPART) %>% unique(), by = "SITEID") %>%
left_join(siteStaffPart, by = "SUBJID") %>%
pivot_wider(names_from = ITEM, values_from = VALUE, id_cols = c(SUBJID, Country, ENPART)) %>%
filter(!is.na(ENPART)) %>%
left_join(role, by = "SUBJID") %>%
filter(!is.na(SSROLETIME))
# Set variable labels for table1
label(siteStaff$SSSATTIME1) <- "After study initiation visit (SIV)"
label(siteStaff$SSSATTIME2) <- "After 3 enrolled participants"
label(siteStaff$SSSATTIME3) <- "After 3 participants completed Week 12"
label(siteStaff$SSSATTIME4) <- "After last patient last visit (LPLV)"
table1_formula <- as.formula("~ SSSATTIME1 + SSSATTIME2 + SSSATTIME3 + SSSATTIME4 | ENPART")
# Create and save the table for all site staff
out <- table1(
table1_formula,
data = siteStaff,
overall = c(right = "Total"),
caption = "All site staff survey answers to: 'I am satisfied with my experience in the RADIAL study so far'",
render.categorical = my.render.cat
)
ft <- t1flex(out)
default_save_ft(ft, "Table 8.4.25 All site staff's satisfaction survey results split per part (ITT for KPI)")
ft
# Table for Investigators only (SSROLETIME == 1)
out <- table1(
table1_formula,
data = siteStaff %>% filter(SSROLETIME == 1),
overall = c(right = "Total"),
caption = "Investigators' survey answers to: 'I am satisfied with my experience in the RADIAL study so far'",
render.categorical = my.render.cat
)
ft <- t1flex(out)
default_save_ft(ft, "Table 8.4.26 Investigators' satisfaction survey results split per part (ITT for KPI)")
ft
# Table for Coordinators only (SSROLETIME == 2)
out <- table1(
table1_formula,
data = siteStaff %>% filter(SSROLETIME == 2),
overall = c(right = "Total"),
caption = "Coordinators' survey answers to: 'I am satisfied with my experience in the RADIAL study so far'",
render.categorical = my.render.cat
)
ft <- t1flex(out)
default_save_ft(ft, "Table 8.4.27 Study coordinators' satisfaction survey results split per part (ITT for KPI)")
ft
# --- Set the data directory and load AE/AD data ---
data_dir <- "data/Final RADIAL datasets/"
# --- Load and preprocess self-reported (diary) adverse events (AD) ---
AD <- read.csv(file.path(data_dir, "wideAD.csv")) %>%
mutate(
# Clean date fields, set NA for missing/invalid entries
ADSTDT_INV = ifelse(ADSTDT_INV == "" | ADSTDT_INV == "-----", NA, ADSTDT_INV),
ADRCD = ifelse(ADRCD == "" | ADRCD == "-----", NA, ADRCD)
) %>%
mutate(
# Convert to Date objects
AESTDT = as.Date(ADSTDT_INV),
AERCD = as.Date(ADRCD),
# Calculate difference in days between event and report
diffAE = ifelse(as.numeric(AERCD - AESTDT) < 0, 0, as.numeric(AERCD - AESTDT)),
AESER = ADSER_INV
) %>%
mutate(
# Flag mismatches (reporting delay > 1 day)
AEmism = ifelse(diffAE > 1, 1, 0)
) %>%
select(SUBJID, AESTDT, AERCD, diffAE, AEmism, AESER) %>%
# Merge with subject-level info
left_join(joined_data[, c("SUBJID", "ENARM", "ENPART", "AFCOU", "FILTER_ITT")], by = "SUBJID") %>%
filter(!is.na(diffAE), FILTER_ITT == 1) %>%
mutate(type = "Self reported (diary)")
# --- Load and preprocess investigator-reported adverse events (AE) ---
AE <- read.csv(file.path(data_dir, "wideAE.csv")) %>%
mutate(
# Clean date fields
AESTDT = ifelse(AESTDT == "" | AESTDT == "-----", NA, AESTDT),
AERCD = ifelse(AERCD == "" | AERCD == "-----", NA, AERCD)
) %>%
mutate(
# Convert to Date objects
AESTDT = as.Date(AESTDT),
AERCD = as.Date(AERCD),
# Calculate difference in days
diffAE = ifelse(as.numeric(AERCD - AESTDT) < 0, 0, as.numeric(AERCD - AESTDT))
) %>%
mutate(
# Flag mismatches
AEmism = ifelse(diffAE > 1, 1, 0)
) %>%
select(SUBJID, AESTDT, AERCD, diffAE, AEmism, AESER) %>%
left_join(joined_data[, c("SUBJID", "ENARM", "ENPART", "AFCOU", "FILTER_ITT")], by = "SUBJID") %>%
filter(!is.na(diffAE), FILTER_ITT == 1) %>%
mutate(type = "Investigator reported")
# --- Combine both sources into one AE dataframe ---
AE <- rbind(AE, AD)
remove(AD)
# --- (Optional) Check for overlapping subjects in both AE and AD ---
# intersect(AE$SUBJID[AE$type == "Self reported (diary)"], AE$SUBJID[AE$type == "Investigator reported"])
ft <- make_tables_8(AE, serious = 0, split = TRUE)
default_save_ft(ft, "Table 8.4.28 AE reporting delay by arm and country (ITT for KPI)")
ft
ft <- make_tables_8(AE, serious = 1)
default_save_ft(ft, "Table 8.4.29 SAE reporting delay by arm and country (ITT for KPI)")
ft
# AE reporting delay by arm (all report types)
p <- make_boxplots_8(AE, 0, split = TRUE)
ggsave(file.path(figures_out, "Figure 8.4.30 Boxplot AE reporting delay by arm (ITT for KPI).png"), plot = p)
p
# SAE reporting delay by arm (all report types)
p <- make_boxplots_8(AE, 1, split = TRUE)
ggsave(file.path(figures_out, "Figure 8.4.31 Boxplot SAE reporting delay by arm (ITT for KPI).png"), plot = p)
p
# AE reporting delay by country, Part A (all report types)
p <- make_boxplots_8(AE, 0, countries = TRUE, part = "A", split = TRUE)
ggsave(file.path(figures_out, "Figure 8.4.32 Boxplot AE reporting delay by country Part A (ITT for KPI).png"), plot = p)
p
# SAE reporting delay by country, Part A (all report types)
p <- make_boxplots_8(AE, 1, countries = TRUE, part = "A", split = TRUE)
ggsave(file.path(figures_out, "Figure 8.4.33 Boxplot SAE reporting delay by country Part A (ITT for KPI).png"), plot = p)
p
# AE reporting delay by country, Part B (all report types)
p <- make_boxplots_8(AE, 0, countries = TRUE, part = "B", split = TRUE)
ggsave(file.path(figures_out, "Figure 8.4.34 Boxplot AE reporting delay by country Part B (ITT for KPI).png"), plot = p)
p
# SAE reporting delay by country, Part B (all report types)
p <- make_boxplots_8(AE, 1, countries = TRUE, part = "B", split = TRUE)
ggsave(file.path(figures_out, "Figure 8.4.35 Boxplot SAE reporting delay by country Part B (ITT for KPI).png"), plot = p)
p
shiny::runApp('Documents/GitHub_UMCU/shiny_CLT')
runApp('Documents/GitHub_UMCU/shiny_CLT')
runApp('Documents/GitHub_UMCU/shiny_CLT')
runApp('Documents/GitHub_UMCU/shiny_CLT')
library(shiny)
runApp('Documents/GitHub_UMCU/shiny_CLT')
runApp('Documents/GitHub_UMCU/shiny_CLT')
runApp('Documents/GitHub_UMCU/shiny_CLT')
runApp('Documents/GitHub_UMCU/shiny_CLT')
runApp('Documents/GitHub_UMCU/shiny_CLT')
shiny::runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
shiny::runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
runApp('Documents/GitHub_UMCU/shiny_ttest_vs_variance')
